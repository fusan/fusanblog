#!/usr/bin/env node

/**
 * Module dependencies.
 */

//heroku https://fusanblog.herokuapp.com/ | https://git.heroku.com/fusanblog.git

var app = require('../app');
var debug = require('debug')('blog:server');
var http = require('http');

var model  = require('../model.js');
  Chat = model.Chat;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//socket express server relation
var io = require('socket.io').listen(server);
var io2 = io.of('/users');

var validator = require('validator');


io.on('connection', function (socket) {
  console.log(validator.isEmail('gogyaru@gmail.com'));

  console.log('a user connected');

  socket.emit('news', { url: 'index' });
  socket.on('my other event', function (data) {
    console.log(data);
  });

  //mouseposition realtime
  socket.on('mousemove', function(data) {
    //console.log(data);
    socket.emit('mousemove return', data);
    socket.broadcast.emit('mousemove return', data);
  });

  socket.on('server push', function(data) {
      //console.log(data);
      socket.emit('client push', data);
      socket.broadcast.emit('client push', data);
  });

  //リアルタイムテキスト
  socket.on('text send', function(data) {
    console.log(data);

    socket.emit('text return', data);
    socket.broadcast.emit('text return', data);
  });

  //チャット履歴の読み込み
  socket.on('chat initial send' ,function(data) {
    if(data.load == 'start') {
      Chat.find({}, function(err, data) {
        socket.emit('chat initial return', data);
     });
    }
  });
  
  //chat message
  socket.on('message send', function(data) {
    //console.log(data);

    var log = {};
      log.pushTime = data.pushTime;
      log.userID = data.userID;
      log.message = validator.escape(data.message);

      console.log(log.message);

    var chat = new Chat(log);
      chat.save(function(err) {
        if(err) throw err;
        Chat.find({}, function(err, data) {
          console.log(data);
        });
      });

    socket.emit('message return', data);
    socket.broadcast.emit('message return', data);
  });

});

//name space
io2.on('connection', function(socket) {
  console.log('namespace ok');
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
